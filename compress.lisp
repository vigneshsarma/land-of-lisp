(defun enlist (n no)
  (if (> n 1)
      (list n no)
    no))
(defun compr (first n last)
  (format t "~A ~A ~A~%" first n last)
  (if (null last)
      (list (enlist n first))
    (if (eql first (car last))
        (compr first (+ n 1) (cdr last))
      (progn
        (cons (enlist n first)
              (compr (car last) 1 (cdr last)))))))
(defun compress (lis)
  (if (consp lis)
      (compr (car lis) 1 (cdr lis ))
    lis))
(defun uncompr (lis)
  (format t "~A~%" lis)
  (if (consp lis)
      (let ((another '(car lis)))
        (do ((i 1 (+ i 1)))
            ((> (car (last lis)) i))
          (cons another (car lis)))
        another)))
(defun uncompress (lis)
  (if (consp lis)
      (cons (uncompr (car lis))
            (uncompress (cdr lis)))))